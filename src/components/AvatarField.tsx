// src/components/AvatarField.tsx

import { Avatar, AvatarProps, Badge, Tooltip } from "@mui/material";
import { get } from "lodash";
import { useState, useEffect, useCallback, useRef, useLayoutEffect } from "react";
import { FieldProps, useRecordContext, useTranslate } from "react-admin";

import { fetchAuthenticatedMedia } from "../utils/fetchMedia";
import { isMXID, isASManaged } from "../utils/mxid";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ.
 * "–ì—Ä—É–ø–ø–∞" -> "–ì"
 * "–ì—Ä—É–ø–ø–∞ 2" -> "–ì2"
 * "123" -> "123"
 * "–ß–∞—Ç –ó–ß" -> "–ß–ó–ß"
 */
const generateInitials = (name: string): string => {
  if (!name) return "?";

  // –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º
  const specialWords = new Set(["–ó–ß", "–û–ß"]);
  const isNumeric = /^\d+$/;

  const words = name.split(/[\s-]+/);

  const initials = words
    .map(word => {
      if (!word) return "";

      // 1. –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
      if (specialWords.has(word) || isNumeric.test(word)) {
        return word;
      }

      // 2. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
      return word.charAt(0).toUpperCase();
    })
    .join("");

  return initials;
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ SVG.
 * –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.
 */
const DynamicProportionalText = ({ text }: { text: string }) => {
  const textRef = useRef<SVGTextElement>(null);
  const [scale, setScale] = useState(1);

  useLayoutEffect(() => {
    const textElement = textRef.current;
    if (!textElement) return;

    const textWidth = textElement.getBBox().width;
    const desiredWidth = 90; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (90% –æ—Ç viewBox)

    if (textWidth > desiredWidth) {
      setScale(desiredWidth / textWidth);
    } else {
      setScale(1);
    }
  }, [text]);

  return (
    <svg width="100%" height="100%" viewBox="0 0 100 100">
      <g transform={`translate(50, 50) scale(${scale})`}>
        <text
          ref={textRef}
          textAnchor="middle"
          dominantBaseline="central"
          style={{
            fontSize: 50, // –ë–æ–ª—å—à–æ–π –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            fill: "currentColor", // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Avatar
          }}
        >
          {text}
        </text>
      </g>
    </svg>
  );
};

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AvatarField ---

const AvatarField = ({ source, ...rest }: AvatarProps & FieldProps) => {
  const { alt, classes, sizes, sx, variant } = rest;
  const record = useRecordContext(rest);
  const mxcURL = get(record, source)?.toString();

  const [src, setSrc] = useState<string>("");

  const fetchAvatar = useCallback(async (mxcURL: string) => {
    try {
      const response = await fetchAuthenticatedMedia(mxcURL, "thumbnail");
      const blob = await response.blob();
      const blobURL = URL.createObjectURL(blob);
      setSrc(blobURL);
    } catch (error) {
      console.error("Failed to fetch avatar:", error);
      setSrc(""); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω fallback
    }
  }, []);

  useEffect(() => {
    if (mxcURL) {
      fetchAvatar(mxcURL);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    return () => {
      if (src) {
        URL.revokeObjectURL(src);
      }
    };
  }, [mxcURL, fetchAvatar]);

  // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è fallback-–∞–≤–∞—Ç–∞—Ä–∞ ---
  const nameForInitials = record?.displayname || record?.name || record?.id || "";
  const letter = generateInitials(nameForInitials);

  // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –±–µ–π–¥–∂–µ–π –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ---
  let badge = "";
  let tooltip = "";
  const translate = useTranslate();

  if (isMXID(record?.id)) {
    switch (record?.user_type) {
      case "bot":
        badge = "ü§ñ";
        tooltip = translate("resources.users.badge.bot");
        break;
      case "support":
        badge = "üìû";
        tooltip = translate("resources.users.badge.support");
        break;
      default:
        badge = "üë§";
        tooltip = translate("resources.users.badge.regular");
        break;
    }
    if (record?.admin) {
      badge = "üëë";
      tooltip = translate("resources.users.badge.admin");
    }
    if (isASManaged(record?.name)) {
      badge = "üõ°Ô∏è";
      tooltip = `${translate("resources.users.badge.system_managed")} (${tooltip})`;
    }
    if (localStorage.getItem("user_id") === record?.id) {
      badge = "üßô‚Äç";
      tooltip = `${translate("resources.users.badge.you")} (${tooltip})`;
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Å–∞–º –∞–≤–∞—Ç–∞—Ä. –ï—Å–ª–∏ `src` –µ—Å—Ç—å, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∏–Ω–∞—á–µ ‚Äî –¥–æ—á–µ—Ä–Ω–∏–π SVG-—ç–ª–µ–º–µ–Ω—Ç.
  const avatar = (
    <Avatar alt={alt} classes={classes} sizes={sizes} src={src} sx={sx} variant={variant}>
      <DynamicProportionalText text={letter} />
    </Avatar>
  );

  // –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±–µ–π–¥–∂, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ Badge –∏ Tooltip
  if (badge) {
    return (
      <Tooltip title={tooltip}>
        <Badge
          badgeContent={badge}
          overlap="circular"
          sx={{ "& .MuiBadge-badge": { width: "10px" } }}
          anchorOrigin={{
            vertical: "bottom",
            horizontal: "right",
          }}
        >
          {avatar}
        </Badge>
      </Tooltip>
    );
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –∞–≤–∞—Ç–∞—Ä (—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ —Å fallback-—Ç–µ–∫—Å—Ç–æ–º)
  return avatar;
};

export default AvatarField;
